// lib/main.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:embarqueellus/screens/main_menu_screen.dart';
import 'package:embarqueellus/database/database_helper.dart';
import 'package:embarqueellus/services/face_recognition_service.dart';
import 'package:embarqueellus/services/offline_sync_service.dart';

const String apiUrl = "https://script.google.com/macros/s/AKfycbwdflIAiZfz9PnolgTsvzcVgs_IpugIhYs4-u0YT6SekJPUqGEhawIntA7tG51NlrlT/exec";

// ‚úÖ TIMER GLOBAL DE SINCRONIZA√á√ÉO
Timer? _syncTimer;

void main() async {
  // Garantir que o Flutter esteja inicializado
  WidgetsFlutterBinding.ensureInitialized();

  try {
    print('üöÄ ========================================');
    print('üöÄ ELLUS - Inicializando Aplica√ß√£o');
    print('üöÄ ========================================');

    // =========================================================================
    // 1. BANCO DE DADOS
    // =========================================================================
    print('');
    print('üíæ [1/4] Inicializando Banco de Dados...');
    final db = DatabaseHelper.instance;
    await db.database; // For√ßa inicializa√ß√£o do banco

    // CR√çTICO: Criar tabelas de facial se n√£o existirem
    await db.ensureFacialSchema();

    print('‚úÖ Banco de dados pronto!');
    print('   - Tabelas: passageiros, alunos, embeddings, logs, sync_queue');

    // =========================================================================
    // 2. RECONHECIMENTO FACIAL
    // =========================================================================
    print('');
    print('üß† [2/4] Carregando Modelo ArcFace...');
    try {
      await FaceRecognitionService.instance.init();
      print('‚úÖ Modelo ArcFace carregado!');
      print('   - Pronto para reconhecimento offline');
      print('   - Limiar de similaridade: ${(FaceRecognitionService.SIMILARITY_THRESHOLD * 100).toStringAsFixed(0)}%');
    } catch (e) {
      print('‚ö†Ô∏è  Aviso: Modelo ArcFace n√£o encontrado');
      print('   Certifique-se que o arquivo existe em:');
      print('   assets/models/arcface.tflite');
      print('   O app funcionar√°, mas reconhecimento estar√° desabilitado.');
    }

    // =========================================================================
    // 3. SINCRONIZA√á√ÉO OFFLINE
    // =========================================================================
    print('');
    print('üîÑ [3/4] Inicializando Sincroniza√ß√£o Offline...');
    await OfflineSyncService.instance.init();
    print('‚úÖ Sincroniza√ß√£o ativa!');
    print('   - Detecta conectividade automaticamente');
    print('   - Fila de sincroniza√ß√£o funcionando');

    // =========================================================================
    // 4. ‚úÖ TIMER DE SINCRONIZA√á√ÉO AUTOM√ÅTICA (A CADA 3 MINUTOS)
    // =========================================================================
    print('');
    print('‚è∞ [4/4] Iniciando Timer de Sincroniza√ß√£o...');
    _iniciarSincronizacaoAutomatica();
    print('‚úÖ Timer configurado!');
    print('   - Sincroniza automaticamente a cada 3 minutos');
    print('   - Sincroniza√ß√£o inicial acontecendo agora...');

    // =========================================================================
    // FINALIZA√á√ÉO
    // =========================================================================
    print('');
    print('üéâ ========================================');
    print('üéâ Aplica√ß√£o inicializada com sucesso!');
    print('üéâ ========================================');
    print('');

  } catch (e) {
    print('');
    print('‚ùå ========================================');
    print('‚ùå ERRO NA INICIALIZA√á√ÉO');
    print('‚ùå ========================================');
    print('‚ùå $e');
    print('');
  }

  runApp(const MyApp());
}

/// ‚úÖ FUN√á√ÉO DE SINCRONIZA√á√ÉO AUTOM√ÅTICA
void _iniciarSincronizacaoAutomatica() {
  // Cancelar timer anterior se existir
  _syncTimer?.cancel();

  // Criar novo timer que executa a cada 3 minutos
  _syncTimer = Timer.periodic(const Duration(minutes: 3), (timer) async {
    print('');
    print('‚è∞ ========================================');
    print('‚è∞ Timer de Sincroniza√ß√£o Disparado');
    print('‚è∞ ========================================');

    try {
      // Tentar sincronizar agora
      final sucesso = await OfflineSyncService.instance.trySyncNow();

      if (sucesso) {
        print('‚úÖ Sincroniza√ß√£o autom√°tica conclu√≠da com sucesso!');
      } else {
        print('‚ö†Ô∏è Sincroniza√ß√£o n√£o executada (sem internet ou sem dados)');
      }
    } catch (e) {
      print('‚ùå Erro na sincroniza√ß√£o autom√°tica: $e');
    }

    print('‚è∞ Pr√≥xima sincroniza√ß√£o em 3 minutos...');
    print('‚è∞ ========================================');
    print('');
  });

  // Executar primeira sincroniza√ß√£o imediatamente
  Future.delayed(const Duration(seconds: 2), () async {
    print('');
    print('üîÑ ========================================');
    print('üîÑ Sincroniza√ß√£o Inicial');
    print('üîÑ ========================================');

    try {
      final sucesso = await OfflineSyncService.instance.trySyncNow();

      if (sucesso) {
        print('‚úÖ Sincroniza√ß√£o inicial conclu√≠da!');
      } else {
        print('üìµ Sincroniza√ß√£o inicial n√£o executada (sem internet ou sem dados pendentes)');
      }
    } catch (e) {
      print('‚ùå Erro na sincroniza√ß√£o inicial: $e');
    }

    print('üîÑ ========================================');
    print('');
  });
}

/// ‚úÖ FUN√á√ÉO PARA PARAR SINCRONIZA√á√ÉO (caso necess√°rio)
void pararSincronizacao() {
  _syncTimer?.cancel();
  _syncTimer = null;
  print('üõë Timer de sincroniza√ß√£o parado');
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ELLUS - Embarque',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: const Color(0xFF4C643C),
          primary: const Color(0xFF4C643C),
        ),
        useMaterial3: true,
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF4C643C),
          foregroundColor: Colors.white,
          elevation: 0,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF4C643C),
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
        cardTheme: CardTheme(
          elevation: 2,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
      home: const MainMenuScreen(),
    );
  }
}